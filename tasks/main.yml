- name: check if jenkins is running.
  uri:
    url: "{{ jenkins_plugins_jenkins_base_url }}"
    method: HEAD
    return_content: yes
    status_code: 200,403
  register: _jenkins_plugins_jenkins_result

- name: fail when responding webservice is not a jenkins instance.
  fail:
    msg: no jenkins instance running on {{ jenkins_plugins_jenkins_base_url }}
  when: _jenkins_plugins_jenkins_result.x_jenkins is not defined

- name: Log update details
  debug:
    msg:
      - "jenkins_facts_updatecenter.updateAgeSeconds"
      - "{{ jenkins_facts_updatecenter.updateAgeSeconds }}"
      - "jenkins_plugins_updates_expiration"
      - "{{ jenkins_plugins_updates_expiration }}"
      - "jenkins_plugins_updates_base_url"
      - "{{ jenkins_plugins_updates_base_url }}"
      - "jenkins_plugins_updates_update_site_url"
      - "{{ jenkins_plugins_updates_update_site_url }}"
  when: jenkins_plugins_debug == true

- name: "Configure Update Center"
  jenkins_script:
    script: "{{ lookup('file', 'scripts/groovy/configure_update_center.groovy') }}"
    user: "{{ jenkins_plugins_admin_username }}"
    password: "{{ jenkins_plugins_admin_password }}"
    url: "{{ jenkins_plugins_jenkins_base_url }}"
    args:
      updates_url: "{{ jenkins_plugins_updates_update_site_url }}"
      proxy_username: "{{ jenkins_plugins_proxy_username }}"
      proxy_password: "{{ jenkins_plugins_proxy_password }}"
      proxy_host: "{{ jenkins_plugins_proxy_host | default('') }}"
      proxy_port: "{{ jenkins_plugins_proxy_port | default(-1)}}"
      proxy_no_proxy_hosts: "{{ jenkins_plugins_proxy_no_proxy_hosts | join(',') }}"
      complete_initial_setup: "{{ jenkins_plugins_complete_initial_setup | lower }}"
  register: jenkins_plugins_update_center_result
  changed_when: jenkins_plugins_update_center_result.output | regex_replace('^Result:\\s*(.*)\\n*$', '\\1') | bool
  notify:
    - wcm-io-devops.jenkins-service restart

- name: Flush pending (restart) handlers when proxy configuration has changed.
  meta: flush_handlers
  when: jenkins_plugins_proxy_result.output | regex_replace('^Result:\\s*(.*)\\n*$', '\\1') | bool

- name: trigger jenkins update check.
  uri:
    url: "{{ jenkins_plugins_jenkins_base_url }}/pluginManager/checkUpdatesServer"
    user: "{{ jenkins_plugins_admin_username }}"
    password: "{{ jenkins_plugins_admin_password }}"
    method: "POST"
    headers:
      Jenkins-Crumb: '{{ jenkins_facts_csrf_crumb }}'
    force_basic_auth: true
    status_code: 302
  tags:
    - jenkins-plugins-update-check
  when: jenkins_facts_updatecenter.updateAgeSeconds > jenkins_plugins_updates_expiration

- name: Calculate plugins to install/update/remove.
  jenkins_plugin_helper:
    plugins_installed: "{{ jenkins_facts_plugins_installed }}"
    plugins_present: "{{ jenkins_plugins_present }}"
    plugins_absent: "{{ jenkins_plugins_absent }}"

- name: Log plugins that will be installed/uninstalled.
  debug:
      msg:
        - "jenkins_plugins_install_plugins"
        - "{{ jenkins_plugins_install_plugins }}"
        - "jenkins_plugins_uninstall_plugins"
        - "{{ jenkins_plugins_uninstall_plugins }}"
  when: jenkins_plugins_debug == true

- name: Install/Manage Jenkins plugins.
  jenkins_plugin:
    name: "{{ item.key }}"
    version: "{{ item.value['version'] | default(omit) }}"
    jenkins_home: "{{ jenkins_plugins_jenkins_home }}"
    url_username: "{{ jenkins_plugins_admin_username }}"
    url_password: "{{ jenkins_plugins_admin_password }}"
    state: "{{ item.value['state'] | default(present) }}"
    timeout: "{{ jenkins_plugins_updates_timeout }}"
    updates_url: "{{ jenkins_plugins_updates_base_url }}"
    updates_expiration: "{{ jenkins_plugins_updates_expiration }}"
    url: "{{ jenkins_plugins_jenkins_base_url }}"
  with_dict: "{{ jenkins_plugins_install_plugins | default({}) }}"
  changed_when: jenkins_plugins_install_plugins | default({}) | length > 0
  notify:
    - wcm-io-devops.jenkins-service restart
  register: _jenkins_plugins_install_result

- name: Uninstall Jenkins plugins.
  jenkins_plugin:
    name: "{{ item.key }}"
    jenkins_home: "{{ jenkins_plugins_jenkins_home }}"
    url_username: "{{ jenkins_plugins_admin_username }}"
    url_password: "{{ jenkins_plugins_admin_password }}"
    state: "{{ item.value['state'] }}"
    timeout: "{{ jenkins_plugins_updates_timeout }}"
    updates_url: "{{ jenkins_plugins_updates_base_url }}"
    updates_expiration: "{{ jenkins_plugins_updates_expiration }}"
    url: "{{ jenkins_plugins_jenkins_base_url }}"
  with_dict: "{{ jenkins_plugins_uninstall_plugins | default({}) }}"
  changed_when: jenkins_plugins_uninstall_plugins | default({}) | length > 0
  notify:
    - wcm-io-devops.jenkins-service restart
  register: _jenkins_plugins_uninstall_result

- name: Flush pending (restart) handlers before continue.
  meta: flush_handlers
  when: _jenkins_plugins_install_result.changed or _jenkins_plugins_uninstall_result.changed

- block:
  - name: "gather jenkins facts."
    include_role:
      name: "wcm-io-devops.jenkins-facts"
      tasks_from: "gather_jenkins_facts.yml"
    vars:
      jenkins_facts_admin_username: "{{ jenkins_plugins_admin_username }}"
      jenkins_facts_admin_password: "{{ jenkins_plugins_admin_password }}"
      jenkins_facts_jenkins_hostname: "{{ jenkins_plugins_jenkins_hostname }}"
      jenkins_facts_jenkins_port: "{{ jenkins_plugins_jenkins_port }}"
      jenkins_facts_jenkins_url_prefix: "{{ jenkins_plugins_jenkins_url_prefix }}"

  - name: "assert that there are no failed plugins."
    assert:
      that: jenkins_facts_plugins_failed | length == 0
      msg:
        - "{{ jenkins_facts_plugins_failed | length }} plugin(s) failed to load!"
        - "{{ jenkins_facts_plugins_failed }}"

  when:
    - jenkins_plugins_failedplugins_check == true
    - (_jenkins_plugins_install_result.changed or _jenkins_plugins_uninstall_result.changed)

